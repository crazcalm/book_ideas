<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
	<head>
		<title>Chapter 3: Logical Arrangements</title>
		<link rel="stylesheet" type="text/css" href="css/epub.css" />
	</head>
	<body>
		<section class="chapter" epub:type="chapter" role="doc-chapter" aria-labelledby="c3_h" id="its_alive">
		  <h2 id="c3_h" class="title">Chapter 3: Logical Arrangements</h2>

		  <p>The power of the Ordering Enum is in the usage of its API and its variants. For example, if you want to sort a Vector of numbers in ascending order, we can accomplish this with the <code>sort</code> method by calling it with no arguements, but we can also accomplish this with the <code>sort_by</code> method by passing in the closure <code>|a, b| a.cmp(b)</code>.</p>

		  <div class="example">
		    <h5>Example 3.1</h5>
		    <pre>let mut list_1 = [6,5,7,4,8,2,9,1,3,0];
let mut list_2 = [6,5,7,4,8,2,9,1,3,0];

list_1.sort();

list_2.sort_by(|a, b| a.cmp(b));

assert_eq!(list_1, list_2);</pre>
		  </div>
		  
		  <p>If we wanted to sort the numbers into descending order, we cannot directly do this with the <code>sort</code> method. We could call <code>sort</code> on a list and then call <code>reverse</code> to give us the correct ordering, but, in doing so, we are not acheiving the correct ordering via sorting. With the <code>sort_by</code> method, we have move options. Yes, we could sort the Vector in ascending order and then call <code>reverse</code> on it, but we can also call <code>reverse</code> on the result of the individual comparisons from the <code>cmp</code> method. This is because <code>cmp</code> returns a variant of the Ordering Enum, and the Ordering Enum has a <code>reverse</code> method that allows you to reverse the result of the comparision. In other words, Ordering::Less, becomes Ordering::Greater, Ordering::Greater becomes Ordering::Less while Ordering::Equal stays the same. This means that if we use <code>sort_by</code> to sort the list in decending order, we will acheive the correct arrangement of elements via the sorting process and without any need of any extra operatons.</p>
		  
		  <div class="example">
		    <h5>Example 3.2</h5>
		    <pre>let mut list_1 = [6,5,7,4,8,2,9,1,3,0];
let mut list_2 = [6,5,7,4,8,2,9,1,3,0];

list_1.sort();
list_1.reverse();

list_2.sort_by(|a, b| a.cmp(b).reverse());

assert_eq!(list_1, list_2);</pre>
		</div>

		  <p>What if we wanted to arrange all of the numbers in ascending order and have all of the odd numbers appear before all of the even numbers? We know we cannot do this with the <code>sort</code> method because we have no way of telling it how to partition our elements into groups of numbers, but we can do this with the <code>sort_by</code> method. We accomplish this by writing a function that determines if <code>a</code> or <code>b</code> is odd, and, if only one of them is odd, we give that one priority. Keeping the default behavior in mind in which the item of least value gets placed in front, we give odd numbers priority over even numbers by making sure we always report that the odd number is less than the even number.</p>

		  <div class="example">
		    <h5>Example 3.3</h5>
		    <pre>use std::cmp::Ordering;

fn main() {
    let mut list: Vec&lt;i32&gt; = vec![3, 2, 5, 1, 6, 7, 8, 0, 9, 4];

    list.sort_by(|a, b| {
        let a_is_odd = a.abs() % 2 == 1;
        let b_is_odd = b.abs() % 2 == 1;

        if a_is_odd &amp;&amp; b_is_odd {
            a.cmp(b)
        } else if a_is_odd {
            Ordering::Less
        } else if b_is_odd {
            Ordering::Greater
        } else {
            a.cmp(b)
        }
    });

    println!("{:?}", list);
}</pre>
		    <h5>Output 3.3</h5>
		    <pre>[1, 3, 5, 7, 9, 0, 2, 4, 6, 8]</pre>
		</div>

		 <p>In the above example, our closure function checks to see if <code>a</code> is odd and if <code>b</code> is odd. If both <code>a</code> and <code>b</code> are odd (or even), then we can do a regular comparision between <code>a</code> and <code>b</code> because niether of them have priority over the other. If <code>a</code> is odd and <code>b</code> is even, we need to report that <code>a</code> is less than <code>b</code> so that <code>a</code> always gets placed in front of <code>b</code>. If <code>b</code> is odd and <code>a</code> is even, then we report that <code>a</code> is greater than <code>b</code> so that <code>b</code> can always be placed in front of <code>a</code>.</p>
 
		    <p>The end result of passing this closure function to our <code>sort_by</code> method is that all of the odd numbers are placed in front of all of the even numbers and the odd numbers and the even numbers, within their respective groups, are arranged in ascending order.</p>

		</section>
	</body>
</html>
