<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en"
	lang="en">
	<head>
		<title>Chapter 13: Testing Poker Hand</title>
		<link rel="stylesheet" type="text/css" href="css/epub.css" />
	</head>
	<body>
		<section class="chapter" epub:type="chapter" role="doc-chapter" aria-labelledby="c4_h" id="conclusion">
		  <h2 id="c4_h" class="title">Chapter 13: Testing Poker Hand</h2>


		  <p>Before moving on to the actual sorting of poker hands, we will write unit tests to verify that the code we currently have works the way we expect it to. The bulk of our PokerHand logic involves looking at our 5 cards using the <code>sort_hand</code> method to deduce and set the poker hand type and sort the cards using the appropriate sorting algorithm. With regard to testing this code like this, my preferred approach is table testing because we are testing one method with many different variations of inputs/start states.</p>

		  <div class="example">
		    <h5>Example 13.1</h5>
		    <pre>...

#[derive(Debug, PartialEq, Eq)]
struct PokerHand {
    cards: Vec&lt;Card&gt;,
    poker_hand_type: Option&lt;PokerHandType&gt;,
}

...

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn poker_hand_sort_hand() {
        let cases = vec![
            (
                "One Pair",
                PokerHand {
                    poker_hand_type: None,
                    cards: vec![
                        Card::new(2, Suit::Club).unwrap(),
                        Card::new(10, Suit::Diamond).unwrap(),
                        Card::new(14, Suit::Spade).unwrap(),
                        Card::new(2, Suit::Heart).unwrap(),
                        Card::new(9, Suit::Club).unwrap(),
                    ],
                },
                PokerHand {
                    poker_hand_type: Some(PokerHandType::OnePair),
                    cards: vec![
                        Card::new(2, Suit::Club).unwrap(),
                        Card::new(2, Suit::Heart).unwrap(),
                        Card::new(14, Suit::Spade).unwrap(),
                        Card::new(10, Suit::Diamond).unwrap(),
                        Card::new(9, Suit::Club).unwrap(),
                    ],
                },
            ),
            ...
            (
                "Four of a Kind",
                PokerHand {
                    poker_hand_type: None,
                    cards: vec![
                        Card::new(2, Suit::Club).unwrap(),
                        Card::new(10, Suit::Diamond).unwrap(),
                        Card::new(2, Suit::Spade).unwrap(),
                        Card::new(2, Suit::Heart).unwrap(),
                        Card::new(2, Suit::Club).unwrap(),
                    ],
                },
                PokerHand {
                    poker_hand_type: Some(PokerHandType::FourOfAKind),
                    cards: vec![
                        Card::new(2, Suit::Club).unwrap(),
                        Card::new(2, Suit::Heart).unwrap(),
                        Card::new(2, Suit::Spade).unwrap(),
                        Card::new(2, Suit::Club).unwrap(),
                        Card::new(10, Suit::Diamond).unwrap(),
                    ],
                },
            ),
	    ...
            (
                "Royal Flush",
                PokerHand {
                    poker_hand_type: None,
                    cards: vec![
                        Card::new(12, Suit::Club).unwrap(),
                        Card::new(14, Suit::Club).unwrap(),
                        Card::new(10, Suit::Club).unwrap(),
                        Card::new(13, Suit::Club).unwrap(),
                        Card::new(11, Suit::Club).unwrap(),
                    ],
                },
                PokerHand {
                    poker_hand_type: Some(PokerHandType::RoyalFlush),
                    cards: vec![
                        Card::new(14, Suit::Club).unwrap(),
                        Card::new(13, Suit::Club).unwrap(),
                        Card::new(12, Suit::Club).unwrap(),
                        Card::new(11, Suit::Club).unwrap(),
                        Card::new(10, Suit::Club).unwrap(),
                    ],
                },
            ),
            ...
        ];

        for (name, mut poker_hand, expected) in cases {
            poker_hand.sort_hand().unwrap();
            assert_eq!(poker_hand, expected, "Case {name} failed");
        }
    }
}


			</pre>

		    <h5>Output 13.1</h5>
		    <pre>running 1 test
test tests::poker_hand_sort_hand ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s</pre>
		  </div>

		  <!-- Left off here -->
		  

		  <!-- Old stuff is below -->

		  
		  <p>Lets walk through the work needed to implement the Ord Trait for our Employee Struct so that we can gain a better understanding of what is happening. We will approach this systematically by writing unit tests for the desired order and then implementing each trait one at a time while also removing it from the derived Trait list.</p>

		  <p>For this example, we want our list of Employees to be sorted by years of service and then by name. With that in mind, here is the unit test that we will use to verify that our changes have not affected our sorting.</p>

		  <code>#[derive(Debug, Eq, PartialEq, PartialOrd, Ord)]
struct Employee {
    years_of_service: u32,
    name: String,
}

fn main() {}

#[cfg(test)]
mod test {
    use super::Employee;

    #[test]
    fn test_sort() {
        let expected = vec![
            Employee {
                years_of_service: 0,
                name: "Dillon".to_string(),
            },
            Employee {
                years_of_service: 1,
                name: "Jerry".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Carmen".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Christy".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Marcus".to_string(),
            },
            Employee {
                years_of_service: 5,
                name: "Jovanna".to_string(),
            },
        ];

        let mut list_of_employees = vec![
            Employee {
                name: "Marcus".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Jovanna".to_string(),
                years_of_service: 5,
            },
            Employee {
                name: "Carmen".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Christy".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Dillon".to_string(),
                years_of_service: 0,
            },
            Employee {
                name: "Jerry".to_string(),
                years_of_service: 1,
            },
        ];

        list_of_employees.sort();

        assert_eq!(list_of_employees, expected);
    }
}
		  </code>

		  <p>The Ord Trait is a super Trait that requires the Eq Trait and the PartialOrd Trait to be implemented. The Eq Trait is also a Super Trait and it requires PartialEq to be implemented. We'll start by implementing the PartialEq Trait.</p>

		  <p>PartialEq is a Trait that has one required method called <code>eq</code> that allows us to compare one instance of the Struct to another instance of the Struct. This method will return a boolean to denote whether or not these Struct instances are equal. With regards to implementation, we will compare the year of service field and the name field of two Struct instances and return the resulting boolean.</p>

		  <code>#[derive(Debug, Eq, PartialOrd, Ord)]
struct Employee {
    years_of_service: u32,
    name: String,
}

impl PartialEq for Employee {
    fn eq(&amp;self, other: &amp;Self) -> bool {
        self.years_of_service == other.years_of_service &amp;&amp; self.name == other.name
    }
}

fn main() {}

#[cfg(test)]
mod test {
    use super::Employee;

    #[test]
    fn test_sort() {
        let expected = vec![
            Employee {
                years_of_service: 0,
                name: "Dillon".to_string(),
            },
            Employee {
                years_of_service: 1,
                name: "Jerry".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Carmen".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Christy".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Marcus".to_string(),
            },
            Employee {
                years_of_service: 5,
                name: "Jovanna".to_string(),
            },
        ];

        let mut list_of_employees = vec![
            Employee {
                name: "Marcus".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Jovanna".to_string(),
                years_of_service: 5,
            },
            Employee {
                name: "Carmen".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Christy".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Dillon".to_string(),
                years_of_service: 0,
            },
            Employee {
                name: "Jerry".to_string(),
                years_of_service: 1,
            },
        ];

        list_of_employees.sort();

        assert_eq!(list_of_employees, expected);
    }
		    }</code>

		  <p>In the example, we implemented the PartialEq Trait for Employee and removed that Trait from the derived list. Feel free to run the unit test to make sure everything still works as expected.</p>

		  <p>Next, we will implement the Eq Trait. The Eq Trait has not required methods. This means that as long as you implement PartialEq Trait, you can get the Eq Trait for free by writing implementing it and leaving the code block for it empty.</p>

		  <code>#[derive(Debug, PartialOrd, Ord)]
struct Employee {
    years_of_service: u32,
    name: String,
}

impl Eq for Employee {}

impl PartialEq for Employee {
    fn eq(&amp;self, other: &amp;Self) -> bool {
        self.years_of_service == other.years_of_service &amp;&amp; self.name == other.name
    }
}

fn main() {}

#[cfg(test)]
mod test {
    use super::Employee;

    #[test]
    fn test_sort() {
        let expected = vec![
            Employee {
                years_of_service: 0,
                name: "Dillon".to_string(),
            },
            Employee {
                years_of_service: 1,
                name: "Jerry".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Carmen".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Christy".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Marcus".to_string(),
            },
            Employee {
                years_of_service: 5,
                name: "Jovanna".to_string(),
            },
        ];

        let mut list_of_employees = vec![
            Employee {
                name: "Marcus".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Jovanna".to_string(),
                years_of_service: 5,
            },
            Employee {
                name: "Carmen".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Christy".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Dillon".to_string(),
                years_of_service: 0,
            },
            Employee {
                name: "Jerry".to_string(),
                years_of_service: 1,
            },
        ];

        list_of_employees.sort();

        assert_eq!(list_of_employees, expected);
    }
}
		  </code>

		  <p>The next Trait we will implement is the PartialOrd Trait. This Trait has one required method called <code>partial_cmp</code> that compares two instance of the smae type and returns an <code>Option&lt;Ordering&gt;</code>. Please note that this method is very similar to the <code>cmp</code> method that comes from the Ord Trait. The difference between these two methods is that <code>cmp</code> returns an Ordering Enum and <code>partial_cmp</code> returns an Option that contains an Ordering Enum.</p>

		  <code>use std::cmp::Ordering;

#[derive(Debug, Ord)]
struct Employee {
    years_of_service: u32,
    name: String,
}

impl PartialOrd for Employee {
    fn partial_cmp(&amp;self, other: &amp;Self) -> Option&lt;Ordering&gt; {
        Some(
            self.years_of_service
                .cmp(&amp;other.years_of_service)
                .then(self.name.cmp(&amp;other.name)),
        )
    }
}

impl Eq for Employee {}

impl PartialEq for Employee {
    fn eq(&amp;self, other: &amp;Self) -> bool {
        self.years_of_service == other.years_of_service &amp;&amp; self.name == other.name
    }
}

fn main() {}

#[cfg(test)]
mod test {
    use super::Employee;

    #[test]
    fn test_sort() {
        let expected = vec![
            Employee {
                years_of_service: 0,
                name: "Dillon".to_string(),
            },
            Employee {
                years_of_service: 1,
                name: "Jerry".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Carmen".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Christy".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Marcus".to_string(),
            },
            Employee {
                years_of_service: 5,
                name: "Jovanna".to_string(),
            },
        ];

        let mut list_of_employees = vec![
            Employee {
                name: "Marcus".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Jovanna".to_string(),
                years_of_service: 5,
            },
            Employee {
                name: "Carmen".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Christy".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Dillon".to_string(),
                years_of_service: 0,
            },
            Employee {
                name: "Jerry".to_string(),
                years_of_service: 1,
            },
        ];

        list_of_employees.sort();

        assert_eq!(list_of_employees, expected);
    }
}
		    </code>

		    <p>When implementing the the <code>partial_cmp</code> method, we can leverage the fact that each of the field types implement the Ord Trait. As such we can compare the years of service field and the name field using their types <code>cmp</code> method and chain the comparisions with the <code>then</code> method from the Ordering Enum that is returned from the <code>cmp</code> method. We wrap all of this in a <code>Some</code> because we need to return <code>Some&lt;Ordering&gt;</code>. Also, because the Ordering Enum is explicitly being mentioned in our function signature, we will need to make sure to import it at the top of the file.</p>

		    <code>use std::cmp::Ordering;

#[derive(Debug, Ord)]
struct Employee {
    name: String,
    years_of_service: u32,
}

impl PartialOrd for Employee {
    fn partial_cmp(&amp;self, other: &amp;Self) -> Option&lt;Ordering&gt; {
        Some(
            self.years_of_service
                .cmp(&amp;other.years_of_service)
                .then(self.name.cmp(&amp;other.name)),
        )
    }
}

impl Eq for Employee {}

impl PartialEq for Employee {
    fn eq(&amp;self, other: &amp;Self) -> bool {
        self.years_of_service == other.years_of_service &amp;&amp; self.name == other.name
    }
}

fn main() {}

#[cfg(test)]
mod test {
    use super::Employee;

    #[test]
    fn test_sort() {
        let expected = vec![
            Employee {
                years_of_service: 0,
                name: "Dillon".to_string(),
            },
            Employee {
                years_of_service: 1,
                name: "Jerry".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Carmen".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Christy".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Marcus".to_string(),
            },
            Employee {
                years_of_service: 5,
                name: "Jovanna".to_string(),
            },
        ];

        let mut list_of_employees = vec![
            Employee {
                name: "Marcus".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Jovanna".to_string(),
                years_of_service: 5,
            },
            Employee {
                name: "Carmen".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Christy".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Dillon".to_string(),
                years_of_service: 0,
            },
            Employee {
                name: "Jerry".to_string(),
                years_of_service: 1,
            },
        ];

        list_of_employees.sort();

        assert_eq!(list_of_employees, expected);
    }
}
		      </code>

		      <p>At this point, we have implemented enough Traits to prevent the chnging of Struct field order from altering our sorting algorithm. To demonstate that, switch the ordering of our Employee Struct fields so that name comes before years of service.</p>
		 

		      <p>The last Trait we have to implement is the Ord Trait. This Trait has one required method called <code>cmp</code>. Given the similarities of the <code>cmp</code> method to the <code>partial_cmp</code> method, we can implement <code>cmp</code> using <code>partial_cmp</code>.</p>

			<code>use std::cmp::Ordering;

#[derive(Debug)]
struct Employee {
    name: String,
    years_of_service: u32,
}

impl Ord for Employee {
    fn cmp(&amp;self, other: &amp;Self) -> Ordering {
        self.partial_cmp(&amp;other).unwrap()
    }
}

impl PartialOrd for Employee {
    fn partial_cmp(&amp;self, other: &amp;Self) -> Option&lt;Ordering&gt; {
        Some(
            self.years_of_service
                .cmp(&amp;other.years_of_service)
                .then(self.name.cmp(&amp;other.name)),
        )
    }
}

impl Eq for Employee {}

impl PartialEq for Employee {
    fn eq(&amp;self, other: &amp;Self) -> bool {
        self.years_of_service == other.years_of_service &amp;&amp; self.name == other.name
    }
}

fn main() {}

#[cfg(test)]
mod test {
    use super::Employee;

    #[test]
    fn test_sort() {
        let expected = vec![
            Employee {
                years_of_service: 0,
                name: "Dillon".to_string(),
            },
            Employee {
                years_of_service: 1,
                name: "Jerry".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Carmen".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Christy".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Marcus".to_string(),
            },
            Employee {
                years_of_service: 5,
                name: "Jovanna".to_string(),
            },
        ];

        let mut list_of_employees = vec![
            Employee {
                name: "Marcus".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Jovanna".to_string(),
                years_of_service: 5,
            },
            Employee {
                name: "Carmen".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Christy".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Dillon".to_string(),
                years_of_service: 0,
            },
            Employee {
                name: "Jerry".to_string(),
                years_of_service: 1,
            },
        ];

        list_of_employees.sort();

        assert_eq!(list_of_employees, expected);
    }
}</code>

			  <p>Congratulations! We have implemented the Ord Trait for our Employee Struct.</p>

			  <p>Before we move on, there is something I have to mention about Super Traits. Given the relationships of the dependencies, it is easy to mistakingly assume that the methods of the Sub Traits must be used to implement the Super Traits. This directional ordering does not exist. For example, even though the Ord Trait is a Super Trait that requires the PArtialOrd Trait, we can use the Ord Trait to implement the PartialOrd Trait.</p>

			  <code>use std::cmp::Ordering;

#[derive(Debug)]
struct Employee {
    name: String,
    years_of_service: u32,
}

impl Ord for Employee {
    fn cmp(&amp;self, other: &amp;Self) -> Ordering {
        self.years_of_service
            .cmp(&amp;other.years_of_service)
            .then(self.name.cmp(&amp;other.name))
    }
}

impl PartialOrd for Employee {
    fn partial_cmp(&amp;self, other: &amp;Self) -> Option&lt;Ordering&gt; {
        Some(self.cmp(other))
    }
}

impl Eq for Employee {}

impl PartialEq for Employee {
    fn eq(&amp;self, other: &amp;Self) -> bool {
        self.years_of_service == other.years_of_service &amp;&amp; self.name == other.name
    }
}

fn main() {}

#[cfg(test)]
mod test {
    use super::Employee;

    #[test]
    fn test_sort() {
        let expected = vec![
            Employee {
                years_of_service: 0,
                name: "Dillon".to_string(),
            },
            Employee {
                years_of_service: 1,
                name: "Jerry".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Carmen".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Christy".to_string(),
            },
            Employee {
                years_of_service: 2,
                name: "Marcus".to_string(),
            },
            Employee {
                years_of_service: 5,
                name: "Jovanna".to_string(),
            },
        ];

        let mut list_of_employees = vec![
            Employee {
                name: "Marcus".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Jovanna".to_string(),
                years_of_service: 5,
            },
            Employee {
                name: "Carmen".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Christy".to_string(),
                years_of_service: 2,
            },
            Employee {
                name: "Dillon".to_string(),
                years_of_service: 0,
            },
            Employee {
                name: "Jerry".to_string(),
                years_of_service: 1,
            },
        ];

        list_of_employees.sort();

        assert_eq!(list_of_employees, expected);
    }
}
</code>
			  
			    <p>In the above example, we took the comparison logic out of the <code>partial_cmp</code> method and put it into the <code>cmp</code> method. Then we called the <code>cmp</code> method within the <code>partial_cmp</code> method. Running our unit tests shows us that this change does not affect our sorting order.</p>
			    
		</section>
	</body>
</html>
