<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en"
	lang="en">
	<head>
		<title>Chapter 6: Multi-dimensional Sorting</title>
		<link rel="stylesheet" type="text/css" href="css/epub.css" />
	</head>
	<body>
		<section class="chapter" epub:type="chapter" role="doc-chapter" aria-labelledby="c4_h" id="conclusion">
		  <h2 id="c4_h" class="title">Chapter 6: Multi-dimensional Sorting</h2>

		  <p>Multi-dimensional sorting is the idea of sorting based on more than one property. A data structure that allows us to easily create items with more than one property are tuple.</p>

		  <p>A Tuple is a finite heterogeneous sequence. Finite meaning that there are a fix number of elements within a tuple. Heterogenous meanint that each element of a tuple can be of a different type.</p>

		  <p>The tuple <code>(String, u32)</code> states that the first element is of the tuple is of type <code>String</code> and the second element of the tuple is of type <code>u32</code>. You can think of the elements of your tuple as properties of the object. For example, <code>String</code> could represent a person's name while <code>u32</code> could represent their age.</p>

		  <p>If we were to sort a list of these tuples of name and age, we could do it by the first element, the second element or a combination of the two elements. To sort only by the first element or the second element would be a one dimensional sort because we would only be sorting by one property. An example of this is sorting a group of people by name. In this type of sort, if two people have the same name, then we can arbitrarily place one person in front of the other because we know that any ordering of these two people would be correct. However, if we were to do a multi-dimensional sort and sort by both name and age, people with the same name would then be sorted by their age. In other words, we will first sort the group of people by name, and, if multiple people have the same name, we would then sort those people by age.</p>

		  <p>This way of sorting where we look at one property and, if two elements have the same value for that property, we then compare the next property is the default sort implementation for Rust Tuples. This implementation start by using the left most elemement in the Tuple for comparison and then moves right as needed.</p>

		  <code>	let mut test = vec![
		("a".to_string(), 1),
		("ab".to_string(), 0),
		("b".to_string(), 2),
		("a".to_string(), 0),
		("ba".to_string(), 0),
	];
    test.sort();

    println!("{:?}", test);
	
	//output: [("a", 0), ("a", 1), ("ab", 0), ("b", 2), ("ba", 0)]
		  </code>

		  <p>In the above example, we use the default sort implementation to sort a list of tuple. We can replicate this sort with the <code>sort_by</code> method by passing the appropriate closure function.</p>

		  <code>    let mut test = vec![
		("a".to_string(), 1),
		("ab".to_string(), 0),
		("b".to_string(), 2),
		("a".to_string(), 0),
		("ba".to_string(), 0),
	];

    test.sort_by(|a, b| a.0.cmp(&amp;b.0).then(a.1.cmp(&amp;b.1)));
    
	println!("{:?}", test);

	//output: [("a", 0), ("a", 1), ("ab", 0), ("b", 2), ("ba", 0)]
		  </code>

		  <p>In our closure we used the <code>cmp</code> method to compare the first element of Tuples <code>a</code> and <code>b</code>. The <code>cmp</code> method returns an Ordering Enum. The Ordering Enum has a <code>then</code> method that allows us to chain Ordering Enums together when the initial <code>cmp</code> result is not Ordering::Equal.</p>


		  <p>Though our tuple has multiple properties, we can still sort by a single property. For example, we could take a list of employees represented by the tuple <code>(&amp;str, u32)</code> where <code>&amp;str</code> is represents their name and <code>u32</code> represents their years with the company and sort them in descending order by how many years they have been with the company.</p>

		  <code>let mut list = vec![
	("Marcus".to_string(), 2),
	("Jovanna".to_string(), 5),
	("Carmen".to_string(), 2),
	("Christy".to_string(), 2),
	("Dillon".to_string(), 0),
	("Jerry".to_string(), 1)
];

list.sort_by(|a, b| a.1.cmp(&amp;b.1).reverse());
    
println!("{:?}", list);

//output: [("Jovanna", 5), ("Marcus", 2), ("Carmen", 2), ("Christy", 2), ("Jerry", 1), ("Dillon", 0)]
		  </code>

		  <p>When looking at the output of our sort, you will notice that employees that have worked the same number of years are not presenting in alphabetical order. This is intentional because the function we are using to sort them ignores their name.</p>
		  
		</section>
	</body>
</html>
